/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pompa.insulina;

import javax.swing.*;

public class Sistema implements Runnable{

    // attributi
    private final Controllore controllore;
    private final Display display;
    private final Sensore sensore;
    private final Serbatoio serbatoio;

    //test_mode, per non creare l'interfaccia grafica
    public static boolean test_mode = false;

    //costruttore
    public Sistema(){
        this.controllore = new Controllore();
        this.display = new Display();
        this.sensore = new Sensore();
        this.serbatoio = new Serbatoio();
    }

    //metodi gestione threads
    public void run(){

        // Ottengo il thread corrente
        String nomeThread = Thread.currentThread().getName();

        //gestione del sensore
        if (nomeThread.equals("sensore")){
            //Genera un nuovo valore ogni 5 secondi
            while(true){
                try {
                    sensore.generaValore();
                    if (sensore.getCondElettrica()==100 || sensore.getCondElettrica() == 0){
                        //Perdita del Paziente
                        break;
                    }
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    System.out.println("Sensore Interrotto");
                }
            }
        }

        //gestione del controllore
        if (nomeThread.equals("controllore")){

            while(true){

                //calcolo ZUCCHERI
                controllore.calcolaZuccheri(sensore.getCondElettrica());
                display.aggiornaZuccheri(controllore.getZuccheri());

                //Perdita del paziente
                if (controllore.getZuccheri() == 0 || controllore.getZuccheri() == 10){

                    //registro la morte
                    display.aggiungiRegistrazione("Morte del Paziente");

                    //Lancio l'ultima volta il Display e smetto di monitorare i valori
                    Thread tdisplay = new Thread(this, "display");
                    tdisplay.start();
                    break;
                }

                //calcolo DOSE
                int dose = controllore.calcolaDose();

                //se nel serbatoio non ci sono abbastanza dosi somministro il massimo possibile
                try{
                    serbatoio.sottraiDosi(dose);
                }
                catch(ArithmeticException ex){
                    dose = serbatoio.getDosi();
                    serbatoio.sottraiDosi(serbatoio.getDosi());
                }
                controllore.setDosePrecedente(dose);

                //somministrazione (SIMULAZIONE POMPA)
                if (dose > 0){
                    sensore.setUltimaDose(dose);
                    display.aggiornaDosi(serbatoio.getDosi());
                    if (dose == 1){
                        display.aggiungiRegistrazione( "Somministrata " + dose + " Dose");
                    }
                    else{
                        display.aggiungiRegistrazione( "Somministrate " + dose + " Dosi");
                    }
                }
                else{
                    display.aggiungiRegistrazione("Aggiornamento Zuccheri");
                }

                //lancio display per STAMPA e EMERGENZE
                Thread tdisplay = new Thread(this, "display");
                tdisplay.start();

                //Attesa 10 Secondi
                try {
                    Thread.sleep(10000);
                } catch (InterruptedException e) {
                    System.out.println("Controllore Interrotto");
                }
            }
        }

        //gestione del display
        if (nomeThread.equals("display")) {

            //Aggiornamento Interfaccia Grafica (DISPLAY)
            if (!test_mode){
                display.stampa();
            }

            //EMERGENZE

            // Se il Paziente è Morto
            if (display.getZuccheri() == 0 || display.getZuccheri() == 10){
                if (!test_mode){
                    JOptionPane.showMessageDialog(null,"Il Paziente ha smesso di Rispondere");
                }
            }
            else{
                //Serbatoio Vuoto - Con Flag
                if (display.getDosiResidue() < 5 && display.getAllarmeSerbatoio()){

                    //prendo la priorità
                    display.setAllarmeSerbatoio(false);

                    if (!test_mode){
                        JOptionPane.showMessageDialog(null,"Serbatoio Vuoto");
                    }

                    serbatoio.riempi();
                    display.aggiornaDosi(20);
                    display.aggiungiRegistrazione("Serbatoio Riempito!");

                    //rilascio la priorità
                    display.setAllarmeSerbatoio(true);
                }

                //Livello Zuccheri Basso - Con Flag
                if (display.getZuccheri() < 3 && display.getAllarmeZuccheri()){

                    display.setAllarmeZuccheri(false);

                    display.aggiungiRegistrazione("Emergenza Zuccheri!");

                    if (!test_mode){
                        JOptionPane.showMessageDialog(null,"Livello Zuccheri Basso!\nRisolvere l'Emergenza");
                    }

                    sensore.inizializzazione();
                    controllore.resetZuccheri();
                    //###
                    controllore.calcolaZuccheri(sensore.getCondElettrica());
                    display.aggiornaZuccheri(controllore.getZuccheri());
                    display.aggiungiRegistrazione("Risolta Emergenza!");

                    display.setAllarmeZuccheri(true);
                }

                //Livello Zuccheri Alto - Con Flag
                if (display.getZuccheri() > 7 && display.getAllarmeZuccheri()){

                    display.setAllarmeZuccheri(false);

                    display.aggiungiRegistrazione("Emergenza Zuccheri!");

                    if (!test_mode){
                        JOptionPane.showMessageDialog(null,"Livello Zuccheri Alto!\nRisolvere l'Emergenza o Attendere che Rientri");
                    }

                    if (controllore.getZuccheri() > 7) {
                        sensore.inizializzazione();
                        controllore.resetZuccheri();
                        //###
                        controllore.calcolaZuccheri(sensore.getCondElettrica());
                        display.aggiornaZuccheri(controllore.getZuccheri());
                        display.aggiungiRegistrazione("Risolta Emergenza!");
                    }
                    else{
                        display.aggiungiRegistrazione("Emergenza Rientrata");
                    }
                    display.setAllarmeZuccheri(true);

                }
            }

        }

    }

    //Nota: viene ritornato il Thread solo per la fase di test
    public Thread lanciaSensore(){
        Thread tSensore = new Thread(this, "sensore");
        tSensore.start();
        return tSensore;
    }

    public Thread lanciaControllore(){
        Thread tControllore = new Thread(this, "controllore");
        tControllore.start();
        return tControllore;
    }

    //metodi per i test

    public Sensore getSensore() {
        return sensore;
    }

    public Controllore getControllore() {
        return controllore;
    }

    public Display getDisplay() {
        return display;
    }

    public Serbatoio getSerbatoio() {
        return serbatoio;
    }
}